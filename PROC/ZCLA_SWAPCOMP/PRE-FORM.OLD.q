/************************************************************/
/**         Populate ZGEM_CONTRACTCOMPONENTS Table         **/
/************************************************************/
#INCLUDE func/ZCLA_DEBUGUSR
/*--*/
:CONTRACT = 0;
:CONTRACT = :$$.CONTRACT;
/*--*/
DELETE FROM ZGEM_CONTRACTCOMPS
WHERE USER = SQL.USER
AND NEWPART = 0
AND TODELETE <> 'Y'
;
/**************************************************/
/* Update Comps With Swapouts Aginst Them         */
/**************************************************/
DECLARE @CCOMP_W_NEW CURSOR FOR
SELECT PART, TYPE
FROM ZGEM_CONTRACTCOMPS
WHERE USER = SQL.USER
AND CONTRACT = :CONTRACT
AND (NEWPART <> 0
OR TODELETE = 'Y')
;
/*--*/
OPEN @CCOMP_W_NEW;
GOTO 12092409459 WHERE :RETVAL <= 0;
/*--*/
LABEL 12092409451;
/*--*/
:PART = 0;
:TYPE = '';
FETCH @CCOMP_W_NEW
INTO :PART, :TYPE;
GOTO 12092409458 WHERE :RETVAL <= 0;
/*--*/
:NOT_AVAILABLE_TO_SWAP = 0.0;
:AVAILABLE_TO_SWAP = 0.0;
/*P - Components*/
/*C - Consumer Units*/
/*W - Consumer Unit Circuits/Ways*/
GOSUB 12092416201 WHERE :TYPE = 'P';
GOSUB 12092416202 WHERE :TYPE = 'C';
GOSUB 12092416203 WHERE :TYPE = 'W';
/*--*/
SELECT 'ZGEM_CONTRACTCOMPS/PRE-FORM'
, 'COMPS THAT ALREADY HAVE A SWAP OUT'
, :CONTRACT
, PARTNAME
, :AVAILABLE_TO_SWAP
, :NOT_AVAILABLE_TO_SWAP
FROM PART
WHERE PART = :PART
AND :DEBUG = 1
FORMAT ADDTO :DEBUGFILE
;
/*--*/
UPDATE ZGEM_CONTRACTCOMPS
SET QTY_NOTTOSWAP = :NOT_AVAILABLE_TO_SWAP
, QTY_TOSWAP = :AVAILABLE_TO_SWAP
WHERE USER = SQL.USER
AND CONTRACT = :CONTRACT
AND PART = :PART
;
/*--*/
LOOP 12092409451;
LABEL 12092409458;
/*--*/
CLOSE @CCOMP_W_NEW;
LABEL 12092409459;
/**************************************************/
/* C - Insert Comps Without Swapout               */
/**************************************************/
INSERT INTO ZGEM_CONTRACTCOMPS (USER
, CONTRACT
, PART
, QTY_NOTTOSWAP
, QTY_TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, C2.PART
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : REALQUANT(PC.TQUANT)))
) AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? REALQUANT(PC.TQUANT) :
(ELSTATUSES.OPENSERIAL = 'Y' ? REALQUANT(PC.TQUANT) : 0 ))
) AS 'Available to Swap'
, 'P'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCOMPONENT PC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.PART = C2.PART
GROUP BY C2.PART
;
/**************************************************/
/* C - Insert Elements Under The Components       */
/**************************************************/
DELETE FROM ZGEM_CCOMPS_ELS
WHERE USER = SQL.USER
;
INSERT INTO ZGEM_CCOMPS_ELS (USER
, CONTRACT
, PART
, PROJACT
, ROOM
, GUID
, TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, PC.PART
, PC.PROJACT
, PC.ROOM
, PC.GUID
, (ELSTATUSES.INITFLAG  = 'Y' ? 'Y' :
(ELSTATUSES.OPENSERIAL = 'Y' ? 'Y' : '' ))
, 'P'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCOMPONENT PC
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
;
/**************************************************/
/* U - Insert CUNITs Without Swapout              */
/**************************************************/
INSERT INTO ZGEM_CONTRACTCOMPS (USER
, CONTRACT
, PART
, QTY_NOTTOSWAP
, QTY_TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, C2.PART
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : PC.ZGEM_TQUANT))
) AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? PC.ZGEM_TQUANT :
(ELSTATUSES.OPENSERIAL = 'Y' ? PC.ZGEM_TQUANT : 0 ))
) AS 'Available to Swap'
, 'C'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.PART = C2.PART
GROUP BY C2.PART
;
/**************************************************/
/* U - Insert Elements Under The CUNITs           */
/**************************************************/
INSERT INTO ZGEM_CCOMPS_ELS (USER
, CONTRACT
, PART
, PROJACT
, ROOM
, GUID
, TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, PC.PART
, PC.PROJACT
, PC.ROOM
, PC.GUID
, (ELSTATUSES.INITFLAG  = 'Y' ? 'Y' :
(ELSTATUSES.OPENSERIAL = 'Y' ? 'Y' : '' ))
, 'C'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
;
/**************************************************/
/* W - Insert Circuits Without Swapout            */
/**************************************************/
INSERT INTO ZGEM_CONTRACTCOMPS (USER
, CONTRACT
, PART
, QTY_NOTTOSWAP
, QTY_TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, C2.PART
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : PC.ZGEM_TQUANT))
) AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? PC.ZGEM_TQUANT :
(ELSTATUSES.OPENSERIAL = 'Y' ? PC.ZGEM_TQUANT : 0 ))
) AS 'Available to Swap'
, 'W'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
, ZCLA_PLOTCUCFG PCC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.CONSUMERUNIT = PCC.CONSUMERUNIT
AND PCC.PART = C2.PART
GROUP BY C2.PART
;
/**************************************************/
/* W - Insert Elements Under The Circuits         */
/**************************************************/
INSERT INTO ZGEM_CCOMPS_ELS (USER
, CONTRACT
, PART
, PROJACT
, ROOM
, GUID
, TOSWAP
, TYPE)
SELECT SQL.USER
, :CONTRACT
, PCC.PART
, PC.PROJACT
, PC.ROOM
, PCC.GUID
, (ELSTATUSES.INITFLAG  = 'Y' ? 'Y' :
(ELSTATUSES.OPENSERIAL = 'Y' ? 'Y' : '' ))
, 'W'
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
, ZCLA_PLOTCUCFG PCC
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.CONSUMERUNIT = PCC.CONSUMERUNIT
;
/************************************************************/
/**                          SUBS                          **/
/************************************************************/
SUB 12092416201;
/* C - Component*/
/*INPUT
.   :CONTRACT
.   :PART
*/
/*OUTPUT
.   :NOT_AVAILABLE_TO_SWAP
.   :AVAILABLE_TO_SWAP
*/
SELECT SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : REALQUANT(PC.TQUANT)))
) AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? REALQUANT(PC.TQUANT) :
(ELSTATUSES.OPENSERIAL = 'Y' ? REALQUANT(PC.TQUANT) : 0 ))
) AS 'Available to Swap'
INTO :NOT_AVAILABLE_TO_SWAP
, :AVAILABLE_TO_SWAP
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCOMPONENT PC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.PART = C2.PART
AND C2.PART = :PART
;
RETURN;
SUB 12092416202;
/* U - Consumer Unit*/
/*INPUT
.   :CONTRACT
.   :PART
*/
/*OUTPUT
.   :NOT_AVAILABLE_TO_SWAP
.   :AVAILABLE_TO_SWAP
*/
SELECT SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : PC.ZGEM_TQUANT))
) * 1.0 AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? PC.ZGEM_TQUANT :
(ELSTATUSES.OPENSERIAL = 'Y' ? PC.ZGEM_TQUANT : 0 ))
) * 1.0 AS 'Available to Swap'
INTO :NOT_AVAILABLE_TO_SWAP
, :AVAILABLE_TO_SWAP
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.PART = C2.PART
AND C2.PART = :PART
;
RETURN;
SUB 12092416203;
/* W - Circuit*/
/*INPUT
.   :CONTRACT
.   :PART
*/
/*OUTPUT
.   :NOT_AVAILABLE_TO_SWAP
.   :AVAILABLE_TO_SWAP
*/
SELECT SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? 0 :
(ELSTATUSES.OPENSERIAL = 'Y' ? 0 : PC.ZGEM_TQUANT))
) * 1.0 AS 'Not Available to Swap'
, SUM(
(ELSTATUSES.INITFLAG  = 'Y' ? PC.ZGEM_TQUANT :
(ELSTATUSES.OPENSERIAL = 'Y' ? PC.ZGEM_TQUANT : 0 ))
) * 1.0 AS 'Available to Swap'
INTO :NOT_AVAILABLE_TO_SWAP
, :AVAILABLE_TO_SWAP
FROM ZCLA_CONTRACTS C
, ZCLA_CONTRACTEL CEL
, ZCLA_PLOTELEMENT PEL
, PROJACTS EL
, ZCLA_ELACTSTAT ELSTAT
, ZCLA_ELSTATUSES ELSTATUSES
, ZCLA_PLOTCU PC
, ZCLA_PLOTCUCFG PCC
, PART C2
WHERE C.CONTRACT = :CONTRACT
AND C.CONTRACT = CEL.CONTRACT
AND C.DOC = EL.DOC
AND CEL.EL = EL.ZCLA_EL
AND EL.ZCLA_EL = PEL.EL
AND EL.LEVEL = 2
AND EL.PROJACT = ELSTAT.PROJACT
AND ELSTAT.STEPSTATUS = ELSTATUSES.STEPSTATUS
AND EL.PROJACT = PC.PROJACT
AND PC.CONSUMERUNIT = PCC.CONSUMERUNIT
AND PCC.PART = C2.PART
AND C2.PART = :PART
;
RETURN;
